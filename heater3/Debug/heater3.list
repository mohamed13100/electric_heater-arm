
heater3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036d0  080036d0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080036d0  080036d0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036d0  080036d0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036d0  080036d0  000136d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080036d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000010  080036e8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  080036e8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd6f  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a1  00000000  00000000  0002bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  0002ed88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d2a  00000000  00000000  0002f888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebeb  00000000  00000000  000475b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089696  00000000  00000000  0005619d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df833  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  000df884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003698 	.word	0x08003698

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003698 	.word	0x08003698

0800014c <SSD_voidDisplay>:




void SSD_voidDisplay(uint8_t Copy_u8Number)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]

	switch(Copy_u8Number)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b0b      	cmp	r3, #11
 800015a:	f200 8223 	bhi.w	80005a4 <SSD_voidDisplay+0x458>
 800015e:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <SSD_voidDisplay+0x18>)
 8000160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000164:	08000195 	.word	0x08000195
 8000168:	080001eb 	.word	0x080001eb
 800016c:	08000241 	.word	0x08000241
 8000170:	08000297 	.word	0x08000297
 8000174:	080002ed 	.word	0x080002ed
 8000178:	08000343 	.word	0x08000343
 800017c:	08000399 	.word	0x08000399
 8000180:	080003ef 	.word	0x080003ef
 8000184:	08000445 	.word	0x08000445
 8000188:	0800049b 	.word	0x0800049b
 800018c:	080004f9 	.word	0x080004f9
 8000190:	0800054f 	.word	0x0800054f
	{
	case 0 : //DATA
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800019a:	48d5      	ldr	r0, [pc, #852]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800019c:	f002 f988 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80001a0:	2201      	movs	r2, #1
 80001a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a6:	48d2      	ldr	r0, [pc, #840]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80001a8:	f002 f982 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80001ac:	2201      	movs	r2, #1
 80001ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001b2:	48d0      	ldr	r0, [pc, #832]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80001b4:	f002 f97c 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80001b8:	2201      	movs	r2, #1
 80001ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001be:	48cd      	ldr	r0, [pc, #820]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80001c0:	f002 f976 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001ca:	48ca      	ldr	r0, [pc, #808]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80001cc:	f002 f970 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d6:	48c7      	ldr	r0, [pc, #796]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80001d8:	f002 f96a 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e2:	48c3      	ldr	r0, [pc, #780]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80001e4:	f002 f964 	bl	80024b0 <HAL_GPIO_WritePin>
 	break;
 80001e8:	e1dc      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 1 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80001ea:	2200      	movs	r2, #0
 80001ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001f0:	48bf      	ldr	r0, [pc, #764]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80001f2:	f002 f95d 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001fc:	48bc      	ldr	r0, [pc, #752]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80001fe:	f002 f957 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000208:	48ba      	ldr	r0, [pc, #744]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800020a:	f002 f951 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000214:	48b7      	ldr	r0, [pc, #732]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000216:	f002 f94b 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000220:	48b4      	ldr	r0, [pc, #720]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000222:	f002 f945 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800022c:	48b1      	ldr	r0, [pc, #708]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800022e:	f002 f93f 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	48ad      	ldr	r0, [pc, #692]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800023a:	f002 f939 	bl	80024b0 <HAL_GPIO_WritePin>
	break;
 800023e:	e1b1      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 2 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000246:	48aa      	ldr	r0, [pc, #680]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000248:	f002 f932 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000252:	48a7      	ldr	r0, [pc, #668]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000254:	f002 f92c 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800025e:	48a5      	ldr	r0, [pc, #660]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000260:	f002 f926 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800026a:	48a2      	ldr	r0, [pc, #648]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800026c:	f002 f920 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000270:	2201      	movs	r2, #1
 8000272:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000276:	489f      	ldr	r0, [pc, #636]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000278:	f002 f91a 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000282:	489c      	ldr	r0, [pc, #624]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000284:	f002 f914 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028e:	4898      	ldr	r0, [pc, #608]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000290:	f002 f90e 	bl	80024b0 <HAL_GPIO_WritePin>
	break;
 8000294:	e186      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 3 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800029c:	4894      	ldr	r0, [pc, #592]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800029e:	f002 f907 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a8:	4891      	ldr	r0, [pc, #580]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80002aa:	f002 f901 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002b4:	488f      	ldr	r0, [pc, #572]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80002b6:	f002 f8fb 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c0:	488c      	ldr	r0, [pc, #560]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80002c2:	f002 f8f5 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002cc:	4889      	ldr	r0, [pc, #548]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80002ce:	f002 f8ef 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80002d2:	2200      	movs	r2, #0
 80002d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d8:	4886      	ldr	r0, [pc, #536]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80002da:	f002 f8e9 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002e4:	4882      	ldr	r0, [pc, #520]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80002e6:	f002 f8e3 	bl	80024b0 <HAL_GPIO_WritePin>
	break;
 80002ea:	e15b      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 4 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002f2:	487f      	ldr	r0, [pc, #508]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80002f4:	f002 f8dc 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	487c      	ldr	r0, [pc, #496]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000300:	f002 f8d6 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030a:	487a      	ldr	r0, [pc, #488]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800030c:	f002 f8d0 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000316:	4877      	ldr	r0, [pc, #476]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000318:	f002 f8ca 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000322:	4874      	ldr	r0, [pc, #464]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000324:	f002 f8c4 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	4871      	ldr	r0, [pc, #452]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000330:	f002 f8be 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033a:	486d      	ldr	r0, [pc, #436]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800033c:	f002 f8b8 	bl	80024b0 <HAL_GPIO_WritePin>



	break;
 8000340:	e130      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 5 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000348:	4869      	ldr	r0, [pc, #420]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800034a:	f002 f8b1 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000354:	4866      	ldr	r0, [pc, #408]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000356:	f002 f8ab 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	4864      	ldr	r0, [pc, #400]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000362:	f002 f8a5 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800036c:	4861      	ldr	r0, [pc, #388]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800036e:	f002 f89f 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000372:	2200      	movs	r2, #0
 8000374:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000378:	485e      	ldr	r0, [pc, #376]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800037a:	f002 f899 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800037e:	2201      	movs	r2, #1
 8000380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000384:	485b      	ldr	r0, [pc, #364]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000386:	f002 f893 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000390:	4857      	ldr	r0, [pc, #348]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000392:	f002 f88d 	bl	80024b0 <HAL_GPIO_WritePin>

		break;
 8000396:	e105      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 6 :

				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800039e:	4854      	ldr	r0, [pc, #336]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80003a0:	f002 f886 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4851      	ldr	r0, [pc, #324]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80003ac:	f002 f880 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b6:	484f      	ldr	r0, [pc, #316]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80003b8:	f002 f87a 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c2:	484c      	ldr	r0, [pc, #304]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80003c4:	f002 f874 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ce:	4849      	ldr	r0, [pc, #292]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80003d0:	f002 f86e 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003da:	4846      	ldr	r0, [pc, #280]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80003dc:	f002 f868 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e6:	4842      	ldr	r0, [pc, #264]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80003e8:	f002 f862 	bl	80024b0 <HAL_GPIO_WritePin>
		break;
 80003ec:	e0da      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 7 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f4:	483e      	ldr	r0, [pc, #248]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80003f6:	f002 f85b 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	483b      	ldr	r0, [pc, #236]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000402:	f002 f855 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800040c:	4839      	ldr	r0, [pc, #228]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800040e:	f002 f84f 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000418:	4836      	ldr	r0, [pc, #216]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800041a:	f002 f849 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000424:	4833      	ldr	r0, [pc, #204]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000426:	f002 f843 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000430:	4830      	ldr	r0, [pc, #192]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000432:	f002 f83d 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800043c:	482c      	ldr	r0, [pc, #176]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800043e:	f002 f837 	bl	80024b0 <HAL_GPIO_WritePin>

		break;
 8000442:	e0af      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 8 :
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800044a:	4829      	ldr	r0, [pc, #164]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 800044c:	f002 f830 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000456:	4826      	ldr	r0, [pc, #152]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000458:	f002 f82a 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000462:	4824      	ldr	r0, [pc, #144]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000464:	f002 f824 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800046e:	4821      	ldr	r0, [pc, #132]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000470:	f002 f81e 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	481e      	ldr	r0, [pc, #120]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 800047c:	f002 f818 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000486:	481b      	ldr	r0, [pc, #108]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 8000488:	f002 f812 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 800048c:	2201      	movs	r2, #1
 800048e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000492:	4817      	ldr	r0, [pc, #92]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 8000494:	f002 f80c 	bl	80024b0 <HAL_GPIO_WritePin>

		break;
 8000498:	e084      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 9 :
		 	 	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80004a2:	f002 f805 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80004ae:	f001 ffff 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b8:	480e      	ldr	r0, [pc, #56]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80004ba:	f001 fff9 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80004c6:	f001 fff3 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d0:	4808      	ldr	r0, [pc, #32]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80004d2:	f001 ffed 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004dc:	4805      	ldr	r0, [pc, #20]	; (80004f4 <SSD_voidDisplay+0x3a8>)
 80004de:	f001 ffe7 	bl	80024b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e8:	4801      	ldr	r0, [pc, #4]	; (80004f0 <SSD_voidDisplay+0x3a4>)
 80004ea:	f001 ffe1 	bl	80024b0 <HAL_GPIO_WritePin>

		break;
 80004ee:	e059      	b.n	80005a4 <SSD_voidDisplay+0x458>
 80004f0:	40010800 	.word	0x40010800
 80004f4:	40010c00 	.word	0x40010c00

	case 10 :
			 	 	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004fe:	482b      	ldr	r0, [pc, #172]	; (80005ac <SSD_voidDisplay+0x460>)
 8000500:	f001 ffd6 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050a:	4828      	ldr	r0, [pc, #160]	; (80005ac <SSD_voidDisplay+0x460>)
 800050c:	f001 ffd0 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000516:	4826      	ldr	r0, [pc, #152]	; (80005b0 <SSD_voidDisplay+0x464>)
 8000518:	f001 ffca 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000522:	4823      	ldr	r0, [pc, #140]	; (80005b0 <SSD_voidDisplay+0x464>)
 8000524:	f001 ffc4 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800052e:	4820      	ldr	r0, [pc, #128]	; (80005b0 <SSD_voidDisplay+0x464>)
 8000530:	f001 ffbe 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000534:	2201      	movs	r2, #1
 8000536:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <SSD_voidDisplay+0x464>)
 800053c:	f001 ffb8 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000546:	4819      	ldr	r0, [pc, #100]	; (80005ac <SSD_voidDisplay+0x460>)
 8000548:	f001 ffb2 	bl	80024b0 <HAL_GPIO_WritePin>

			break;
 800054c:	e02a      	b.n	80005a4 <SSD_voidDisplay+0x458>

	case 11 :
			 	 	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000554:	4815      	ldr	r0, [pc, #84]	; (80005ac <SSD_voidDisplay+0x460>)
 8000556:	f001 ffab 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000560:	4812      	ldr	r0, [pc, #72]	; (80005ac <SSD_voidDisplay+0x460>)
 8000562:	f001 ffa5 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800056c:	4810      	ldr	r0, [pc, #64]	; (80005b0 <SSD_voidDisplay+0x464>)
 800056e:	f001 ff9f 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	480d      	ldr	r0, [pc, #52]	; (80005b0 <SSD_voidDisplay+0x464>)
 800057a:	f001 ff99 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000584:	480a      	ldr	r0, [pc, #40]	; (80005b0 <SSD_voidDisplay+0x464>)
 8000586:	f001 ff93 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000590:	4807      	ldr	r0, [pc, #28]	; (80005b0 <SSD_voidDisplay+0x464>)
 8000592:	f001 ff8d 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059c:	4803      	ldr	r0, [pc, #12]	; (80005ac <SSD_voidDisplay+0x460>)
 800059e:	f001 ff87 	bl	80024b0 <HAL_GPIO_WritePin>

			break;
 80005a2:	bf00      	nop

	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010800 	.word	0x40010800
 80005b0:	40010c00 	.word	0x40010c00

080005b4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005c4:	4b18      	ldr	r3, [pc, #96]	; (8000628 <MX_ADC1_Init+0x74>)
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <MX_ADC1_Init+0x78>)
 80005c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_ADC1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <MX_ADC1_Init+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_ADC1_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_ADC1_Init+0x74>)
 80005de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_ADC1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_ADC1_Init+0x74>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_ADC1_Init+0x74>)
 80005f2:	f000 fe0b 	bl	800120c <HAL_ADC_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 fbe0 	bl	8000dc0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000604:	2301      	movs	r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4805      	ldr	r0, [pc, #20]	; (8000628 <MX_ADC1_Init+0x74>)
 8000612:	f001 f899 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800061c:	f000 fbd0 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000002c 	.word	0x2000002c
 800062c:	40012400 	.word	0x40012400

08000630 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a2c      	ldr	r2, [pc, #176]	; (80006fc <HAL_ADC_MspInit+0xcc>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d151      	bne.n	80006f4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a24      	ldr	r2, [pc, #144]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 800066e:	f043 0304 	orr.w	r3, r3, #4
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <HAL_ADC_MspInit+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0304 	and.w	r3, r3, #4
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000684:	2303      	movs	r3, #3
 8000686:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	4619      	mov	r1, r3
 800068e:	481d      	ldr	r0, [pc, #116]	; (8000704 <HAL_ADC_MspInit+0xd4>)
 8000690:	f001 fd8a 	bl	80021a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <HAL_ADC_MspInit+0xdc>)
 8000698:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ac:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006be:	2220      	movs	r2, #32
 80006c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006ca:	f001 fb7f 	bl	8001dcc <HAL_DMA_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80006d4:	f000 fb74 	bl	8000dc0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006dc:	621a      	str	r2, [r3, #32]
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_ADC_MspInit+0xd8>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	2012      	movs	r0, #18
 80006ea:	f001 fb2a 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006ee:	2012      	movs	r0, #18
 80006f0:	f001 fb43 	bl	8001d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40012400 	.word	0x40012400
 8000700:	40021000 	.word	0x40021000
 8000704:	40010800 	.word	0x40010800
 8000708:	2000005c 	.word	0x2000005c
 800070c:	40020008 	.word	0x40020008

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200b      	movs	r0, #11
 8000734:	f001 fb05 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000738:	200b      	movs	r0, #11
 800073a:	f001 fb1e 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0310 	add.w	r3, r7, #16
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000760:	4b47      	ldr	r3, [pc, #284]	; (8000880 <MX_GPIO_Init+0x134>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a46      	ldr	r2, [pc, #280]	; (8000880 <MX_GPIO_Init+0x134>)
 8000766:	f043 0310 	orr.w	r3, r3, #16
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b44      	ldr	r3, [pc, #272]	; (8000880 <MX_GPIO_Init+0x134>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0310 	and.w	r3, r3, #16
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000778:	4b41      	ldr	r3, [pc, #260]	; (8000880 <MX_GPIO_Init+0x134>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a40      	ldr	r2, [pc, #256]	; (8000880 <MX_GPIO_Init+0x134>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <MX_GPIO_Init+0x134>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0320 	and.w	r3, r3, #32
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MX_GPIO_Init+0x134>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <MX_GPIO_Init+0x134>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x134>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a8:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_GPIO_Init+0x134>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a34      	ldr	r2, [pc, #208]	; (8000880 <MX_GPIO_Init+0x134>)
 80007ae:	f043 0308 	orr.w	r3, r3, #8
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_GPIO_Init+0x134>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0308 	and.w	r3, r3, #8
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, yellow_Pin|blue_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007c6:	482f      	ldr	r0, [pc, #188]	; (8000884 <MX_GPIO_Init+0x138>)
 80007c8:	f001 fe72 	bl	80024b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red_Pin|B_Pin|A_Pin|G_Pin
 80007cc:	2200      	movs	r2, #0
 80007ce:	f649 1102 	movw	r1, #39170	; 0x9902
 80007d2:	482d      	ldr	r0, [pc, #180]	; (8000888 <MX_GPIO_Init+0x13c>)
 80007d4:	f001 fe6c 	bl	80024b0 <HAL_GPIO_WritePin>
                          |DOT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin|C_Pin
 80007d8:	2200      	movs	r2, #0
 80007da:	f24f 3108 	movw	r1, #62216	; 0xf308
 80007de:	482b      	ldr	r0, [pc, #172]	; (800088c <MX_GPIO_Init+0x140>)
 80007e0:	f001 fe66 	bl	80024b0 <HAL_GPIO_WritePin>
                          |COM3_Pin|COM1_Pin|COM2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = yellow_Pin|blue_Pin;
 80007e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	4821      	ldr	r0, [pc, #132]	; (8000884 <MX_GPIO_Init+0x138>)
 80007fe:	f001 fcd3 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = red_Pin|B_Pin|A_Pin|G_Pin
 8000802:	f649 1302 	movw	r3, #39170	; 0x9902
 8000806:	613b      	str	r3, [r7, #16]
                          |DOT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4619      	mov	r1, r3
 800081a:	481b      	ldr	r0, [pc, #108]	; (8000888 <MX_GPIO_Init+0x13c>)
 800081c:	f001 fcc4 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000820:	f640 4302 	movw	r3, #3074	; 0xc02
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_GPIO_Init+0x144>)
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4815      	ldr	r0, [pc, #84]	; (800088c <MX_GPIO_Init+0x140>)
 8000836:	f001 fcb7 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = F_Pin|E_Pin|D_Pin|C_Pin
 800083a:	f24f 3308 	movw	r3, #62216	; 0xf308
 800083e:	613b      	str	r3, [r7, #16]
                          |COM3_Pin|COM1_Pin|COM2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2302      	movs	r3, #2
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	4619      	mov	r1, r3
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <MX_GPIO_Init+0x140>)
 8000854:	f001 fca8 	bl	80021a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2007      	movs	r0, #7
 800085e:	f001 fa70 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000862:	2007      	movs	r0, #7
 8000864:	f001 fa89 	bl	8001d7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000868:	2200      	movs	r2, #0
 800086a:	2100      	movs	r1, #0
 800086c:	2028      	movs	r0, #40	; 0x28
 800086e:	f001 fa68 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000872:	2028      	movs	r0, #40	; 0x28
 8000874:	f001 fa81 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000878:	bf00      	nop
 800087a:	3720      	adds	r7, #32
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000
 8000884:	40011000 	.word	0x40011000
 8000888:	40010800 	.word	0x40010800
 800088c:	40010c00 	.word	0x40010c00
 8000890:	10110000 	.word	0x10110000

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000898:	f000 fc32 	bl	8001100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089c:	f000 f8f0 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a0:	f7ff ff54 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 80008a4:	f7ff ff34 	bl	8000710 <MX_DMA_Init>
  MX_ADC1_Init();
 80008a8:	f7ff fe84 	bl	80005b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 80008ac:	f000 fb74 	bl	8000f98 <MX_TIM3_Init>
  MX_TIM2_Init();
 80008b0:	f000 fb26 	bl	8000f00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // START THE TIMEER INTERUPY
  HAL_TIM_Base_Start_IT(&htim2);
 80008b4:	4865      	ldr	r0, [pc, #404]	; (8000a4c <main+0x1b8>)
 80008b6:	f002 fb19 	bl	8002eec <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80008ba:	4865      	ldr	r0, [pc, #404]	; (8000a50 <main+0x1bc>)
 80008bc:	f002 fb16 	bl	8002eec <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &adc_data, 1); //cimsis
 80008c0:	2201      	movs	r2, #1
 80008c2:	4964      	ldr	r1, [pc, #400]	; (8000a54 <main+0x1c0>)
 80008c4:	4864      	ldr	r0, [pc, #400]	; (8000a58 <main+0x1c4>)
 80008c6:	f000 fd79 	bl	80013bc <HAL_ADC_Start_DMA>
  //H_LCD_void_Init();
  // this function take data from adc and put it in adc_data
  /* USER CODE END 2 */

	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 80008ca:	201c      	movs	r0, #28
 80008cc:	f001 fa63 	bl	8001d96 <HAL_NVIC_DisableIRQ>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  switch (MODE_STAT)
 80008d0:	4b62      	ldr	r3, [pc, #392]	; (8000a5c <main+0x1c8>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d002      	beq.n	80008de <main+0x4a>
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d035      	beq.n	8000948 <main+0xb4>
 80008dc:	e059      	b.n	8000992 <main+0xfe>
	  {
	  case NORMAL_MODE :

		  	ssd_3_dig[0] = ( (adc_data/100) %10);
 80008de:	4b5d      	ldr	r3, [pc, #372]	; (8000a54 <main+0x1c0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a5f      	ldr	r2, [pc, #380]	; (8000a60 <main+0x1cc>)
 80008e4:	fba2 2303 	umull	r2, r3, r2, r3
 80008e8:	0959      	lsrs	r1, r3, #5
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <main+0x1d0>)
 80008ec:	fba3 2301 	umull	r2, r3, r3, r1
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	1aca      	subs	r2, r1, r3
 80008fc:	b2d2      	uxtb	r2, r2
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <main+0x1d4>)
 8000900:	701a      	strb	r2, [r3, #0]
		  	ssd_3_dig[1] = ( (adc_data/10) %10);
 8000902:	4b54      	ldr	r3, [pc, #336]	; (8000a54 <main+0x1c0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a57      	ldr	r2, [pc, #348]	; (8000a64 <main+0x1d0>)
 8000908:	fba2 2303 	umull	r2, r3, r2, r3
 800090c:	08d9      	lsrs	r1, r3, #3
 800090e:	4b55      	ldr	r3, [pc, #340]	; (8000a64 <main+0x1d0>)
 8000910:	fba3 2301 	umull	r2, r3, r3, r1
 8000914:	08da      	lsrs	r2, r3, #3
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	1aca      	subs	r2, r1, r3
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <main+0x1d4>)
 8000924:	705a      	strb	r2, [r3, #1]
		    ssd_3_dig[2] = (  adc_data %10);
 8000926:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <main+0x1c0>)
 8000928:	6819      	ldr	r1, [r3, #0]
 800092a:	4b4e      	ldr	r3, [pc, #312]	; (8000a64 <main+0x1d0>)
 800092c:	fba3 2301 	umull	r2, r3, r3, r1
 8000930:	08da      	lsrs	r2, r3, #3
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	1aca      	subs	r2, r1, r3
 800093c:	b2d2      	uxtb	r2, r2
 800093e:	4b4a      	ldr	r3, [pc, #296]	; (8000a68 <main+0x1d4>)
 8000940:	709a      	strb	r2, [r3, #2]
		    temp_control();
 8000942:	f000 f993 	bl	8000c6c <temp_control>
	  break ;
 8000946:	e024      	b.n	8000992 <main+0xfe>

	  case TEMP_SET_MODE :
		  ssd_3_dig[0] = (10);  // F
 8000948:	4b47      	ldr	r3, [pc, #284]	; (8000a68 <main+0x1d4>)
 800094a:	220a      	movs	r2, #10
 800094c:	701a      	strb	r2, [r3, #0]
		  ssd_3_dig[1] = ( (set_temp/10) %10);
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <main+0x1d8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <main+0x1d0>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <main+0x1d0>)
 800095e:	fba3 1302 	umull	r1, r3, r3, r2
 8000962:	08d9      	lsrs	r1, r3, #3
 8000964:	460b      	mov	r3, r1
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	440b      	add	r3, r1
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	1ad3      	subs	r3, r2, r3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b3d      	ldr	r3, [pc, #244]	; (8000a68 <main+0x1d4>)
 8000972:	705a      	strb	r2, [r3, #1]
		  ssd_3_dig[2] = (  set_temp %10);
 8000974:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <main+0x1d8>)
 8000976:	781a      	ldrb	r2, [r3, #0]
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <main+0x1d0>)
 800097a:	fba3 1302 	umull	r1, r3, r3, r2
 800097e:	08d9      	lsrs	r1, r3, #3
 8000980:	460b      	mov	r3, r1
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	440b      	add	r3, r1
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	b2da      	uxtb	r2, r3
 800098c:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <main+0x1d4>)
 800098e:	709a      	strb	r2, [r3, #2]
	  break ;
 8000990:	bf00      	nop





	  if(set_flag == 1) // set button
 8000992:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <main+0x1dc>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d108      	bne.n	80009ae <main+0x11a>
	  {
		  on_of_control();
 800099c:	f000 f9d4 	bl	8000d48 <on_of_control>
		  set_flag = 0;
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <main+0x1dc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(400); // for debunce
 80009a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009aa:	f000 fc0b 	bl	80011c4 <HAL_Delay>
	  }


	  if(up_flag == 1) //  up button
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <main+0x1e0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d11b      	bne.n	80009f0 <main+0x15c>
	  {
		  if(MODE_STAT == TEMP_SET_MODE )
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <main+0x1c8>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d10a      	bne.n	80009d6 <main+0x142>
		  {
			if(set_temp != MAX_TEMP)
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <main+0x1d8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b3c      	cmp	r3, #60	; 0x3c
 80009c6:	d009      	beq.n	80009dc <main+0x148>
			{
				set_temp+=5 ;
 80009c8:	4b28      	ldr	r3, [pc, #160]	; (8000a6c <main+0x1d8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	3305      	adds	r3, #5
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <main+0x1d8>)
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e002      	b.n	80009dc <main+0x148>
			}
		  }
		  else
		  {
			  MODE_STAT = TEMP_SET_MODE;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <main+0x1c8>)
 80009d8:	2202      	movs	r2, #2
 80009da:	701a      	strb	r2, [r3, #0]
		  }

		  time_out = 20;
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <main+0x1e4>)
 80009de:	2214      	movs	r2, #20
 80009e0:	701a      	strb	r2, [r3, #0]

		  HAL_Delay(400);
 80009e2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80009e6:	f000 fbed 	bl	80011c4 <HAL_Delay>
		  up_flag = 0;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <main+0x1e0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
	  }
	  if(down_flag == 1)// down button
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <main+0x1e8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d11b      	bne.n	8000a32 <main+0x19e>
	  {
		 if(MODE_STAT == TEMP_SET_MODE)
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <main+0x1c8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d10a      	bne.n	8000a18 <main+0x184>
		 {
			if(set_temp != MIN_TEMP)
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <main+0x1d8>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b23      	cmp	r3, #35	; 0x23
 8000a08:	d009      	beq.n	8000a1e <main+0x18a>
			{
				set_temp-=5 ;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <main+0x1d8>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	3b05      	subs	r3, #5
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <main+0x1d8>)
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e002      	b.n	8000a1e <main+0x18a>
			}
		 }
		 else
		 {

			 MODE_STAT = TEMP_SET_MODE;
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <main+0x1c8>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
		 }
		 time_out = 20;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <main+0x1e4>)
 8000a20:	2214      	movs	r2, #20
 8000a22:	701a      	strb	r2, [r3, #0]

		  HAL_Delay(400);
 8000a24:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a28:	f000 fbcc 	bl	80011c4 <HAL_Delay>
	  	 down_flag = 0;
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <main+0x1e8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	  }




	  if(time_out == 0)
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <main+0x1e4>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	f47f af49 	bne.w	80008d0 <main+0x3c>
	  {
		  MODE_STAT = NORMAL_MODE;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <main+0x1c8>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
		  time_out = 0;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <main+0x1e4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
	  switch (MODE_STAT)
 8000a4a:	e741      	b.n	80008d0 <main+0x3c>
 8000a4c:	200000b0 	.word	0x200000b0
 8000a50:	200000f8 	.word	0x200000f8
 8000a54:	200000a0 	.word	0x200000a0
 8000a58:	2000002c 	.word	0x2000002c
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	51eb851f 	.word	0x51eb851f
 8000a64:	cccccccd 	.word	0xcccccccd
 8000a68:	200000a4 	.word	0x200000a4
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	200000aa 	.word	0x200000aa
 8000a74:	200000a8 	.word	0x200000a8
 8000a78:	200000ab 	.word	0x200000ab
 8000a7c:	200000a9 	.word	0x200000a9

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8a:	2228      	movs	r2, #40	; 0x28
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fdfa 	bl	8003688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000acc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd1a 	bl	8002510 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ae2:	f000 f96d 	bl	8000dc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 ff86 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b0e:	f000 f957 	bl	8000dc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b12:	2302      	movs	r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 f8de 	bl	8002ce0 <HAL_RCCEx_PeriphCLKConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b2a:	f000 f949 	bl	8000dc0 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	; 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) //10ms for multyplexing ssd
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b48:	d14c      	bne.n	8000be4 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		  switch(data)
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	d02b      	beq.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x74>
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	dc3e      	bgt.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d002      	beq.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d012      	beq.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000b60:	e039      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  {
		  case 1:

			  HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_SET);
 8000b62:	2201      	movs	r2, #1
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	482a      	ldr	r0, [pc, #168]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b6a:	f001 fca1 	bl	80024b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_RESET);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2108      	movs	r1, #8
 8000b72:	4828      	ldr	r0, [pc, #160]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b74:	f001 fc9c 	bl	80024b0 <HAL_GPIO_WritePin>
			  SSD_voidDisplay( ssd_3_dig[0]);
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fae4 	bl	800014c <SSD_voidDisplay>


			  break ;
 8000b84:	e027      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x9e>
		  case 2 :

			  HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_SET);
 8000b86:	2201      	movs	r2, #1
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	4821      	ldr	r0, [pc, #132]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b8e:	f001 fc8f 	bl	80024b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b98:	481e      	ldr	r0, [pc, #120]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000b9a:	f001 fc89 	bl	80024b0 <HAL_GPIO_WritePin>
			  SSD_voidDisplay( ssd_3_dig[1]);
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fad1 	bl	800014c <SSD_voidDisplay>
			  break ;
 8000baa:	e014      	b.n	8000bd6 <HAL_TIM_PeriodElapsedCallback+0x9e>

		  case 3 :

			  HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2108      	movs	r1, #8
 8000bb0:	4818      	ldr	r0, [pc, #96]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000bb2:	f001 fc7d 	bl	80024b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000bbe:	f001 fc77 	bl	80024b0 <HAL_GPIO_WritePin>
			  SSD_voidDisplay( ssd_3_dig[2]);
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fabf 	bl	800014c <SSD_voidDisplay>

			  data = 0 ;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
			  break ;
 8000bd4:	bf00      	nop
		  }
	   data++ ;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000be2:	701a      	strb	r2, [r3, #0]
	}

  if(htim->Instance == TIM3) //100ms
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0xce>
  {
	  if(time_out > 0)
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0xce>
	  {
		  time_out--;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000c04:	701a      	strb	r2, [r3, #0]
	  }
  }

}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000a7 	.word	0x200000a7
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	200000a4 	.word	0x200000a4
 8000c1c:	40000400 	.word	0x40000400
 8000c20:	200000ab 	.word	0x200000ab

08000c24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c34:	d102      	bne.n	8000c3c <HAL_GPIO_EXTI_Callback+0x18>
	{
		set_flag = 1;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_10)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c42:	d102      	bne.n	8000c4a <HAL_GPIO_EXTI_Callback+0x26>
	{
		up_flag = 1;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <HAL_GPIO_EXTI_Callback+0x40>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	701a      	strb	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_1)
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d102      	bne.n	8000c56 <HAL_GPIO_EXTI_Callback+0x32>
	{
		down_flag = 1;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
	}

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	200000aa 	.word	0x200000aa
 8000c64:	200000a8 	.word	0x200000a8
 8000c68:	200000a9 	.word	0x200000a9

08000c6c <temp_control>:

void temp_control(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

	if(on_of_mode == 1)
 8000c70:	4b2f      	ldr	r3, [pc, #188]	; (8000d30 <temp_control+0xc4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d159      	bne.n	8000d2c <temp_control+0xc0>
	{
		if(adc_data <= (set_temp - 5))
 8000c78:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <temp_control+0xc8>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	3b05      	subs	r3, #5
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <temp_control+0xcc>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d314      	bcc.n	8000cb2 <temp_control+0x46>
		{
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	482b      	ldr	r0, [pc, #172]	; (8000d3c <temp_control+0xd0>)
 8000c8e:	f001 fc0f 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4829      	ldr	r0, [pc, #164]	; (8000d40 <temp_control+0xd4>)
 8000c9a:	f001 fc09 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(blue_GPIO_Port, blue_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	4826      	ldr	r0, [pc, #152]	; (8000d40 <temp_control+0xd4>)
 8000ca6:	f001 fc03 	bl	80024b0 <HAL_GPIO_WritePin>
			until_flag = 1;
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <temp_control+0xd8>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
		else if(adc_data == set_temp)
		{
			until_flag = 0;
		}
	}
}
 8000cb0:	e03c      	b.n	8000d2c <temp_control+0xc0>
		else if(adc_data >= (set_temp + 5))
 8000cb2:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <temp_control+0xc8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3305      	adds	r3, #5
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <temp_control+0xcc>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d814      	bhi.n	8000cec <temp_control+0x80>
			HAL_GPIO_WritePin(blue_GPIO_Port, blue_Pin, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	481d      	ldr	r0, [pc, #116]	; (8000d40 <temp_control+0xd4>)
 8000cca:	f001 fbf1 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd4:	481a      	ldr	r0, [pc, #104]	; (8000d40 <temp_control+0xd4>)
 8000cd6:	f001 fbeb 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4817      	ldr	r0, [pc, #92]	; (8000d3c <temp_control+0xd0>)
 8000ce0:	f001 fbe6 	bl	80024b0 <HAL_GPIO_WritePin>
			until_flag = 1;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <temp_control+0xd8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	701a      	strb	r2, [r3, #0]
}
 8000cea:	e01f      	b.n	8000d2c <temp_control+0xc0>
		else if(until_flag == 0)
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <temp_control+0xd8>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d111      	bne.n	8000d18 <temp_control+0xac>
			HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4811      	ldr	r0, [pc, #68]	; (8000d40 <temp_control+0xd4>)
 8000cfc:	f001 fbd8 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2102      	movs	r1, #2
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <temp_control+0xd0>)
 8000d06:	f001 fbd3 	bl	80024b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(blue_GPIO_Port, blue_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <temp_control+0xd4>)
 8000d12:	f001 fbcd 	bl	80024b0 <HAL_GPIO_WritePin>
}
 8000d16:	e009      	b.n	8000d2c <temp_control+0xc0>
		else if(adc_data == set_temp)
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <temp_control+0xc8>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <temp_control+0xcc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d102      	bne.n	8000d2c <temp_control+0xc0>
			until_flag = 0;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <temp_control+0xd8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	200000ad 	.word	0x200000ad
 8000d34:	20000000 	.word	0x20000000
 8000d38:	200000a0 	.word	0x200000a0
 8000d3c:	40010800 	.word	0x40010800
 8000d40:	40011000 	.word	0x40011000
 8000d44:	200000ae 	.word	0x200000ae

08000d48 <on_of_control>:

void on_of_control(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

	if(on_of_mode == 1)
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <on_of_control+0x68>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d124      	bne.n	8000d9e <on_of_control+0x56>
	{
		ssd_3_dig[0] = (11);
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <on_of_control+0x6c>)
 8000d56:	220b      	movs	r2, #11
 8000d58:	701a      	strb	r2, [r3, #0]
		ssd_3_dig[1] = (11);
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <on_of_control+0x6c>)
 8000d5c:	220b      	movs	r2, #11
 8000d5e:	705a      	strb	r2, [r3, #1]
		ssd_3_dig[2] = (11);
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <on_of_control+0x6c>)
 8000d62:	220b      	movs	r2, #11
 8000d64:	709a      	strb	r2, [r3, #2]
		HAL_Delay(400);
 8000d66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d6a:	f000 fa2b 	bl	80011c4 <HAL_Delay>
		HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8000d6e:	201c      	movs	r0, #28
 8000d70:	f001 f811 	bl	8001d96 <HAL_NVIC_DisableIRQ>
		HAL_GPIO_WritePin(red_GPIO_Port, red_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2102      	movs	r1, #2
 8000d78:	480f      	ldr	r0, [pc, #60]	; (8000db8 <on_of_control+0x70>)
 8000d7a:	f001 fb99 	bl	80024b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(blue_GPIO_Port, blue_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <on_of_control+0x74>)
 8000d86:	f001 fb93 	bl	80024b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow_GPIO_Port, yellow_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <on_of_control+0x74>)
 8000d92:	f001 fb8d 	bl	80024b0 <HAL_GPIO_WritePin>

		on_of_mode = 0;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <on_of_control+0x68>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
	{
		on_of_mode = 1;
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
	}

}
 8000d9c:	e005      	b.n	8000daa <on_of_control+0x62>
		on_of_mode = 1;
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <on_of_control+0x68>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000da4:	201c      	movs	r0, #28
 8000da6:	f000 ffe8 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200000ad 	.word	0x200000ad
 8000db4:	200000a4 	.word	0x200000a4
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc4:	b672      	cpsid	i
}
 8000dc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <Error_Handler+0x8>
	...

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6193      	str	r3, [r2, #24]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_MspInit+0x5c>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x5c>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x5c>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x60>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_MspInit+0x60>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40010000 	.word	0x40010000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr

08000e5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr

08000e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr

08000e72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e76:	f000 f989 	bl	800118c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e82:	2002      	movs	r0, #2
 8000e84:	f001 fb2c 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <DMA1_Channel1_IRQHandler+0x10>)
 8000e92:	f001 f855 	bl	8001f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000005c 	.word	0x2000005c

08000ea0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <ADC1_2_IRQHandler+0x10>)
 8000ea6:	f000 fb67 	bl	8001578 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000002c 	.word	0x2000002c

08000eb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM2_IRQHandler+0x10>)
 8000eba:	f002 f869 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000b0 	.word	0x200000b0

08000ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM3_IRQHandler+0x10>)
 8000ece:	f002 f85f 	bl	8002f90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000f8 	.word	0x200000f8

08000edc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ee0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ee4:	f001 fafc 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ee8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000eec:	f001 faf8 	bl	80024e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f26:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f44:	4813      	ldr	r0, [pc, #76]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f46:	f001 ff81 	bl	8002e4c <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f50:	f7ff ff36 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f62:	f002 f91d 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f7ff ff28 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_TIM2_Init+0x94>)
 8000f7e:	f002 faef 	bl	8003560 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f88:	f7ff ff1a 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f8c:	bf00      	nop
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200000b0 	.word	0x200000b0

08000f98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fac:	463b      	mov	r3, r7
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_TIM3_Init+0x94>)
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	; (8001030 <MX_TIM3_Init+0x98>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM3_Init+0x94>)
 8000fbc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000fc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc2:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM3_Init+0x94>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000fc8:	4b18      	ldr	r3, [pc, #96]	; (800102c <MX_TIM3_Init+0x94>)
 8000fca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_TIM3_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM3_Init+0x94>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <MX_TIM3_Init+0x94>)
 8000fde:	f001 ff35 	bl	8002e4c <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000fe8:	f7ff feea 	bl	8000dc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_TIM3_Init+0x94>)
 8000ffa:	f002 f8d1 	bl	80031a0 <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001004:	f7ff fedc 	bl	8000dc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001008:	2320      	movs	r3, #32
 800100a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_TIM3_Init+0x94>)
 8001016:	f002 faa3 	bl	8003560 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001020:	f7ff fece 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200000f8 	.word	0x200000f8
 8001030:	40000400 	.word	0x40000400

08001034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001044:	d114      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	201c      	movs	r0, #28
 8001064:	f000 fe6d 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001068:	201c      	movs	r0, #28
 800106a:	f000 fe86 	bl	8001d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800106e:	e018      	b.n	80010a2 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_TIM_Base_MspInit+0x7c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d113      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	61d3      	str	r3, [r2, #28]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_TIM_Base_MspInit+0x78>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2100      	movs	r1, #0
 8001096:	201d      	movs	r0, #29
 8001098:	f000 fe53 	bl	8001d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800109c:	201d      	movs	r0, #29
 800109e:	f000 fe6c 	bl	8001d7a <HAL_NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40000400 	.word	0x40000400

080010b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010da:	f7ff ff0b 	bl	8000ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f002 faaf 	bl	8003640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010e2:	f7ff fbd7 	bl	8000894 <main>
  bx lr
 80010e6:	4770      	bx	lr
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010f0:	080036d8 	.word	0x080036d8
  ldr r2, =_sbss
 80010f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010f8:	20000144 	.word	0x20000144

080010fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <CAN1_RX1_IRQHandler>
	...

08001100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_Init+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_Init+0x28>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001110:	2003      	movs	r0, #3
 8001112:	f000 fe0b 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001116:	200f      	movs	r0, #15
 8001118:	f000 f808 	bl	800112c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800111c:	f7ff fe56 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40022000 	.word	0x40022000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fe31 	bl	8001db2 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 fdeb 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000004 	.word	0x20000004
 8001184:	2000000c 	.word	0x2000000c
 8001188:	20000008 	.word	0x20000008

0800118c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_IncTick+0x1c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4b05      	ldr	r3, [pc, #20]	; (80011ac <HAL_IncTick+0x20>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_IncTick+0x20>)
 800119e:	6013      	str	r3, [r2, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	2000000c 	.word	0x2000000c
 80011ac:	20000140 	.word	0x20000140

080011b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b02      	ldr	r3, [pc, #8]	; (80011c0 <HAL_GetTick+0x10>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	20000140 	.word	0x20000140

080011c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011cc:	f7ff fff0 	bl	80011b0 <HAL_GetTick>
 80011d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011dc:	d005      	beq.n	80011ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <HAL_Delay+0x44>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ea:	bf00      	nop
 80011ec:	f7ff ffe0 	bl	80011b0 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d8f7      	bhi.n	80011ec <HAL_Delay+0x28>
  {
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000000c 	.word	0x2000000c

0800120c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e0be      	b.n	80013ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff f9f0 	bl	8000630 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fbcb 	bl	80019ec <ADC_ConversionStop_Disable>
 8001256:	4603      	mov	r3, r0
 8001258:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 8099 	bne.w	800139a <HAL_ADC_Init+0x18e>
 8001268:	7dfb      	ldrb	r3, [r7, #23]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 8095 	bne.w	800139a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001278:	f023 0302 	bic.w	r3, r3, #2
 800127c:	f043 0202 	orr.w	r2, r3, #2
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800128c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7b1b      	ldrb	r3, [r3, #12]
 8001292:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001294:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	4313      	orrs	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a4:	d003      	beq.n	80012ae <HAL_ADC_Init+0xa2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d102      	bne.n	80012b4 <HAL_ADC_Init+0xa8>
 80012ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b2:	e000      	b.n	80012b6 <HAL_ADC_Init+0xaa>
 80012b4:	2300      	movs	r3, #0
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	7d1b      	ldrb	r3, [r3, #20]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d119      	bne.n	80012f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b1b      	ldrb	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	035a      	lsls	r2, r3, #13
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	e00b      	b.n	80012f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	f043 0201 	orr.w	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_ADC_Init+0x1a8>)
 8001314:	4013      	ands	r3, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	430b      	orrs	r3, r1
 800131e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001328:	d003      	beq.n	8001332 <HAL_ADC_Init+0x126>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d104      	bne.n	800133c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	3b01      	subs	r3, #1
 8001338:	051b      	lsls	r3, r3, #20
 800133a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	430a      	orrs	r2, r1
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_ADC_Init+0x1ac>)
 8001358:	4013      	ands	r3, r2
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d10b      	bne.n	8001378 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001376:	e018      	b.n	80013aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f023 0312 	bic.w	r3, r3, #18
 8001380:	f043 0210 	orr.w	r2, r3, #16
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001398:	e007      	b.n	80013aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	f043 0210 	orr.w	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	ffe1f7fd 	.word	0xffe1f7fd
 80013b8:	ff1f0efe 	.word	0xff1f0efe

080013bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a64      	ldr	r2, [pc, #400]	; (8001564 <HAL_ADC_Start_DMA+0x1a8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_ADC_Start_DMA+0x24>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a63      	ldr	r2, [pc, #396]	; (8001568 <HAL_ADC_Start_DMA+0x1ac>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d106      	bne.n	80013ee <HAL_ADC_Start_DMA+0x32>
 80013e0:	4b60      	ldr	r3, [pc, #384]	; (8001564 <HAL_ADC_Start_DMA+0x1a8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f040 80b3 	bne.w	8001554 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Start_DMA+0x40>
 80013f8:	2302      	movs	r3, #2
 80013fa:	e0ae      	b.n	800155a <HAL_ADC_Start_DMA+0x19e>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fa97 	bl	8001938 <ADC_Enable>
 800140a:	4603      	mov	r3, r0
 800140c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2b00      	cmp	r3, #0
 8001412:	f040 809a 	bne.w	800154a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800141e:	f023 0301 	bic.w	r3, r3, #1
 8001422:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_ADC_Start_DMA+0x1ac>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d105      	bne.n	8001440 <HAL_ADC_Start_DMA+0x84>
 8001434:	4b4b      	ldr	r3, [pc, #300]	; (8001564 <HAL_ADC_Start_DMA+0x1a8>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d115      	bne.n	800146c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001456:	2b00      	cmp	r3, #0
 8001458:	d026      	beq.n	80014a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001462:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800146a:	e01d      	b.n	80014a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a39      	ldr	r2, [pc, #228]	; (8001564 <HAL_ADC_Start_DMA+0x1a8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d004      	beq.n	800148c <HAL_ADC_Start_DMA+0xd0>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a38      	ldr	r2, [pc, #224]	; (8001568 <HAL_ADC_Start_DMA+0x1ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d10d      	bne.n	80014a8 <HAL_ADC_Start_DMA+0xec>
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_ADC_Start_DMA+0x1a8>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d007      	beq.n	80014a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	f023 0206 	bic.w	r2, r3, #6
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
 80014c0:	e002      	b.n	80014c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_ADC_Start_DMA+0x1b0>)
 80014d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <HAL_ADC_Start_DMA+0x1b4>)
 80014de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <HAL_ADC_Start_DMA+0x1b8>)
 80014e6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0202 	mvn.w	r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001500:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a18      	ldr	r0, [r3, #32]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	334c      	adds	r3, #76	; 0x4c
 800150c:	4619      	mov	r1, r3
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f000 fcb5 	bl	8001e80 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001520:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001524:	d108      	bne.n	8001538 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001534:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001536:	e00f      	b.n	8001558 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001546:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001548:	e006      	b.n	8001558 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001552:	e001      	b.n	8001558 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001558:	7dfb      	ldrb	r3, [r7, #23]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40012400 	.word	0x40012400
 8001568:	40012800 	.word	0x40012800
 800156c:	08001a6f 	.word	0x08001a6f
 8001570:	08001aeb 	.word	0x08001aeb
 8001574:	08001b07 	.word	0x08001b07

08001578 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	2b20      	cmp	r3, #32
 800158c:	d140      	bne.n	8001610 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b02      	cmp	r3, #2
 800159a:	d139      	bne.n	8001610 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015c2:	d11d      	bne.n	8001600 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d119      	bne.n	8001600 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0220 	bic.w	r2, r2, #32
 80015da:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f87c 	bl	80016fe <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f06f 0212 	mvn.w	r2, #18
 800160e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b80      	cmp	r3, #128	; 0x80
 800161c:	d14f      	bne.n	80016be <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d148      	bne.n	80016be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800164e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001652:	d012      	beq.n	800167a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800165e:	2b00      	cmp	r3, #0
 8001660:	d125      	bne.n	80016ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800166c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001670:	d11d      	bne.n	80016ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001688:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fa43 	bl	8001b3a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f06f 020c 	mvn.w	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c8:	2b40      	cmp	r3, #64	; 0x40
 80016ca:	d114      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10d      	bne.n	80016f6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f81b 	bl	8001722 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0201 	mvn.w	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x20>
 8001764:	2302      	movs	r3, #2
 8001766:	e0dc      	b.n	8001922 <HAL_ADC_ConfigChannel+0x1da>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d81c      	bhi.n	80017b2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b05      	subs	r3, #5
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
 80017b0:	e03c      	b.n	800182c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d81c      	bhi.n	80017f4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b23      	subs	r3, #35	; 0x23
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4019      	ands	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b23      	subs	r3, #35	; 0x23
 80017e6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	631a      	str	r2, [r3, #48]	; 0x30
 80017f2:	e01b      	b.n	800182c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b41      	subs	r3, #65	; 0x41
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4019      	ands	r1, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b41      	subs	r3, #65	; 0x41
 8001820:	fa00 f203 	lsl.w	r2, r0, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	d91c      	bls.n	800186e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	3b1e      	subs	r3, #30
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6898      	ldr	r0, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	3b1e      	subs	r3, #30
 8001860:	fa00 f203 	lsl.w	r2, r0, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	e019      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	2207      	movs	r2, #7
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6898      	ldr	r0, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	fa00 f203 	lsl.w	r2, r0, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d003      	beq.n	80018b2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018ae:	2b11      	cmp	r3, #17
 80018b0:	d132      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <HAL_ADC_ConfigChannel+0x1e4>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d125      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d126      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018d8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d11a      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_ADC_ConfigChannel+0x1e8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a13      	ldr	r2, [pc, #76]	; (8001934 <HAL_ADC_ConfigChannel+0x1ec>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f8:	e002      	b.n	8001900 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x1b2>
 8001906:	e007      	b.n	8001918 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190c:	f043 0220 	orr.w	r2, r3, #32
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001920:	7bfb      	ldrb	r3, [r7, #15]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40012400 	.word	0x40012400
 8001930:	20000004 	.word	0x20000004
 8001934:	431bde83 	.word	0x431bde83

08001938 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b01      	cmp	r3, #1
 8001954:	d040      	beq.n	80019d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <ADC_Enable+0xac>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <ADC_Enable+0xb0>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001974:	e002      	b.n	800197c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001982:	f7ff fc15 	bl	80011b0 <HAL_GetTick>
 8001986:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001988:	e01f      	b.n	80019ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800198a:	f7ff fc11 	bl	80011b0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d918      	bls.n	80019ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d011      	beq.n	80019ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	f043 0210 	orr.w	r2, r3, #16
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f043 0201 	orr.w	r2, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e007      	b.n	80019da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d1d8      	bne.n	800198a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000004 	.word	0x20000004
 80019e8:	431bde83 	.word	0x431bde83

080019ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d12e      	bne.n	8001a64 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fbcb 	bl	80011b0 <HAL_GetTick>
 8001a1a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1c:	e01b      	b.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a1e:	f7ff fbc7 	bl	80011b0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d914      	bls.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e007      	b.n	8001a66 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d0dc      	beq.n	8001a1e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d127      	bne.n	8001ad8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001aa2:	d115      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d105      	bne.n	8001ad0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fe14 	bl	80016fe <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ad6:	e004      	b.n	8001ae2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	4798      	blx	r3
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fe09 	bl	8001710 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f043 0204 	orr.w	r2, r3, #4
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff fe01 	bl	8001734 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db12      	blt.n	8001c20 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	490a      	ldr	r1, [pc, #40]	; (8001c2c <__NVIC_DisableIRQ+0x44>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	3320      	adds	r3, #32
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c14:	f3bf 8f4f 	dsb	sy
}
 8001c18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c1a:	f3bf 8f6f 	isb	sy
}
 8001c1e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff09 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff1e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff11 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff1f 	bl	8001be8 <__NVIC_DisableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff94 	bl	8001ce8 <SysTick_Config>
 8001dc0:	4603      	mov	r3, r0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e043      	b.n	8001e6a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_DMA_Init+0xa8>)
 8001dea:	4413      	add	r3, r2
 8001dec:	4a22      	ldr	r2, [pc, #136]	; (8001e78 <HAL_DMA_Init+0xac>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_DMA_Init+0xb0>)
 8001dfe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	bffdfff8 	.word	0xbffdfff8
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	40020000 	.word	0x40020000

08001e80 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_DMA_Start_IT+0x20>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e04a      	b.n	8001f36 <HAL_DMA_Start_IT+0xb6>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d13a      	bne.n	8001f28 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f938 	bl	800214c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 020e 	orr.w	r2, r2, #14
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e00f      	b.n	8001f16 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 020a 	orr.w	r2, r2, #10
 8001f14:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e005      	b.n	8001f34 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f30:	2302      	movs	r3, #2
 8001f32:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d04f      	beq.n	8002008 <HAL_DMA_IRQHandler+0xc8>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d04a      	beq.n	8002008 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0204 	bic.w	r2, r2, #4
 8001f8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a66      	ldr	r2, [pc, #408]	; (8002130 <HAL_DMA_IRQHandler+0x1f0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d029      	beq.n	8001fee <HAL_DMA_IRQHandler+0xae>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a65      	ldr	r2, [pc, #404]	; (8002134 <HAL_DMA_IRQHandler+0x1f4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d022      	beq.n	8001fea <HAL_DMA_IRQHandler+0xaa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a63      	ldr	r2, [pc, #396]	; (8002138 <HAL_DMA_IRQHandler+0x1f8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01a      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0xa4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a62      	ldr	r2, [pc, #392]	; (800213c <HAL_DMA_IRQHandler+0x1fc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d012      	beq.n	8001fde <HAL_DMA_IRQHandler+0x9e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a60      	ldr	r2, [pc, #384]	; (8002140 <HAL_DMA_IRQHandler+0x200>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_DMA_IRQHandler+0x98>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <HAL_DMA_IRQHandler+0x204>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d102      	bne.n	8001fd2 <HAL_DMA_IRQHandler+0x92>
 8001fcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd0:	e00e      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fd6:	e00b      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fdc:	e008      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe2:	e005      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe8:	e002      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fea:	2340      	movs	r3, #64	; 0x40
 8001fec:	e000      	b.n	8001ff0 <HAL_DMA_IRQHandler+0xb0>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	4a55      	ldr	r2, [pc, #340]	; (8002148 <HAL_DMA_IRQHandler+0x208>)
 8001ff2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8094 	beq.w	8002126 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002006:	e08e      	b.n	8002126 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	2202      	movs	r2, #2
 800200e:	409a      	lsls	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d056      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x186>
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d051      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 020a 	bic.w	r2, r2, #10
 800203e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a38      	ldr	r2, [pc, #224]	; (8002130 <HAL_DMA_IRQHandler+0x1f0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d029      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x166>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a37      	ldr	r2, [pc, #220]	; (8002134 <HAL_DMA_IRQHandler+0x1f4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d022      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x162>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a35      	ldr	r2, [pc, #212]	; (8002138 <HAL_DMA_IRQHandler+0x1f8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d01a      	beq.n	800209c <HAL_DMA_IRQHandler+0x15c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a34      	ldr	r2, [pc, #208]	; (800213c <HAL_DMA_IRQHandler+0x1fc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d012      	beq.n	8002096 <HAL_DMA_IRQHandler+0x156>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a32      	ldr	r2, [pc, #200]	; (8002140 <HAL_DMA_IRQHandler+0x200>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00a      	beq.n	8002090 <HAL_DMA_IRQHandler+0x150>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a31      	ldr	r2, [pc, #196]	; (8002144 <HAL_DMA_IRQHandler+0x204>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d102      	bne.n	800208a <HAL_DMA_IRQHandler+0x14a>
 8002084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002088:	e00e      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	e00b      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	e008      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 8002096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209a:	e005      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	e002      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 80020a2:	2320      	movs	r3, #32
 80020a4:	e000      	b.n	80020a8 <HAL_DMA_IRQHandler+0x168>
 80020a6:	2302      	movs	r3, #2
 80020a8:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_DMA_IRQHandler+0x208>)
 80020aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d034      	beq.n	8002126 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020c4:	e02f      	b.n	8002126 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	2208      	movs	r2, #8
 80020cc:	409a      	lsls	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d028      	beq.n	8002128 <HAL_DMA_IRQHandler+0x1e8>
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d023      	beq.n	8002128 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 020e 	bic.w	r2, r2, #14
 80020ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	2101      	movs	r1, #1
 80020fa:	fa01 f202 	lsl.w	r2, r1, r2
 80020fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
    }
  }
  return;
 8002126:	bf00      	nop
 8002128:	bf00      	nop
}
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40020008 	.word	0x40020008
 8002134:	4002001c 	.word	0x4002001c
 8002138:	40020030 	.word	0x40020030
 800213c:	40020044 	.word	0x40020044
 8002140:	40020058 	.word	0x40020058
 8002144:	4002006c 	.word	0x4002006c
 8002148:	40020000 	.word	0x40020000

0800214c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b10      	cmp	r3, #16
 8002178:	d108      	bne.n	800218c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800218a:	e007      	b.n	800219c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	60da      	str	r2, [r3, #12]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ba:	e169      	b.n	8002490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021bc:	2201      	movs	r2, #1
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 8158 	bne.w	800248a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a9a      	ldr	r2, [pc, #616]	; (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d05e      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021e4:	4a98      	ldr	r2, [pc, #608]	; (8002448 <HAL_GPIO_Init+0x2a0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d875      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021ea:	4a98      	ldr	r2, [pc, #608]	; (800244c <HAL_GPIO_Init+0x2a4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d058      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021f0:	4a96      	ldr	r2, [pc, #600]	; (800244c <HAL_GPIO_Init+0x2a4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d86f      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 80021f6:	4a96      	ldr	r2, [pc, #600]	; (8002450 <HAL_GPIO_Init+0x2a8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d052      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 80021fc:	4a94      	ldr	r2, [pc, #592]	; (8002450 <HAL_GPIO_Init+0x2a8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d869      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002202:	4a94      	ldr	r2, [pc, #592]	; (8002454 <HAL_GPIO_Init+0x2ac>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04c      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002208:	4a92      	ldr	r2, [pc, #584]	; (8002454 <HAL_GPIO_Init+0x2ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d863      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800220e:	4a92      	ldr	r2, [pc, #584]	; (8002458 <HAL_GPIO_Init+0x2b0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d046      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
 8002214:	4a90      	ldr	r2, [pc, #576]	; (8002458 <HAL_GPIO_Init+0x2b0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d85d      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 800221a:	2b12      	cmp	r3, #18
 800221c:	d82a      	bhi.n	8002274 <HAL_GPIO_Init+0xcc>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d859      	bhi.n	80022d6 <HAL_GPIO_Init+0x12e>
 8002222:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <HAL_GPIO_Init+0x80>)
 8002224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002228:	080022a3 	.word	0x080022a3
 800222c:	0800227d 	.word	0x0800227d
 8002230:	0800228f 	.word	0x0800228f
 8002234:	080022d1 	.word	0x080022d1
 8002238:	080022d7 	.word	0x080022d7
 800223c:	080022d7 	.word	0x080022d7
 8002240:	080022d7 	.word	0x080022d7
 8002244:	080022d7 	.word	0x080022d7
 8002248:	080022d7 	.word	0x080022d7
 800224c:	080022d7 	.word	0x080022d7
 8002250:	080022d7 	.word	0x080022d7
 8002254:	080022d7 	.word	0x080022d7
 8002258:	080022d7 	.word	0x080022d7
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022d7 	.word	0x080022d7
 8002264:	080022d7 	.word	0x080022d7
 8002268:	080022d7 	.word	0x080022d7
 800226c:	08002285 	.word	0x08002285
 8002270:	08002299 	.word	0x08002299
 8002274:	4a79      	ldr	r2, [pc, #484]	; (800245c <HAL_GPIO_Init+0x2b4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d013      	beq.n	80022a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227a:	e02c      	b.n	80022d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e029      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	3304      	adds	r3, #4
 800228a:	623b      	str	r3, [r7, #32]
          break;
 800228c:	e024      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	3308      	adds	r3, #8
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e01f      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	330c      	adds	r3, #12
 800229e:	623b      	str	r3, [r7, #32]
          break;
 80022a0:	e01a      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022aa:	2304      	movs	r3, #4
 80022ac:	623b      	str	r3, [r7, #32]
          break;
 80022ae:	e013      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d105      	bne.n	80022c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022b8:	2308      	movs	r3, #8
 80022ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	611a      	str	r2, [r3, #16]
          break;
 80022c2:	e009      	b.n	80022d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c4:	2308      	movs	r3, #8
 80022c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	615a      	str	r2, [r3, #20]
          break;
 80022ce:	e003      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d0:	2300      	movs	r3, #0
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e000      	b.n	80022d8 <HAL_GPIO_Init+0x130>
          break;
 80022d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d801      	bhi.n	80022e2 <HAL_GPIO_Init+0x13a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	e001      	b.n	80022e6 <HAL_GPIO_Init+0x13e>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2bff      	cmp	r3, #255	; 0xff
 80022ec:	d802      	bhi.n	80022f4 <HAL_GPIO_Init+0x14c>
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	e002      	b.n	80022fa <HAL_GPIO_Init+0x152>
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	3b08      	subs	r3, #8
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	210f      	movs	r1, #15
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	6a39      	ldr	r1, [r7, #32]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	431a      	orrs	r2, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80b1 	beq.w	800248a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b4a      	ldr	r3, [pc, #296]	; (8002460 <HAL_GPIO_Init+0x2b8>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_GPIO_Init+0x2bc>)
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	220f      	movs	r2, #15
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a40      	ldr	r2, [pc, #256]	; (8002468 <HAL_GPIO_Init+0x2c0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d013      	beq.n	8002394 <HAL_GPIO_Init+0x1ec>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_GPIO_Init+0x2c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d00d      	beq.n	8002390 <HAL_GPIO_Init+0x1e8>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a3e      	ldr	r2, [pc, #248]	; (8002470 <HAL_GPIO_Init+0x2c8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d007      	beq.n	800238c <HAL_GPIO_Init+0x1e4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a3d      	ldr	r2, [pc, #244]	; (8002474 <HAL_GPIO_Init+0x2cc>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_GPIO_Init+0x1e0>
 8002384:	2303      	movs	r3, #3
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002388:	2304      	movs	r3, #4
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x1ee>
 8002394:	2300      	movs	r3, #0
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a6:	492f      	ldr	r1, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x2bc>)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	492c      	ldr	r1, [pc, #176]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	4928      	ldr	r1, [pc, #160]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4922      	ldr	r1, [pc, #136]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	491e      	ldr	r1, [pc, #120]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	4918      	ldr	r1, [pc, #96]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4914      	ldr	r1, [pc, #80]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 8002428:	4013      	ands	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d021      	beq.n	800247c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_GPIO_Init+0x2d0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e021      	b.n	800248a <HAL_GPIO_Init+0x2e2>
 8002446:	bf00      	nop
 8002448:	10320000 	.word	0x10320000
 800244c:	10310000 	.word	0x10310000
 8002450:	10220000 	.word	0x10220000
 8002454:	10210000 	.word	0x10210000
 8002458:	10120000 	.word	0x10120000
 800245c:	10110000 	.word	0x10110000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_GPIO_Init+0x304>)
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	43db      	mvns	r3, r3
 8002484:	4909      	ldr	r1, [pc, #36]	; (80024ac <HAL_GPIO_Init+0x304>)
 8002486:	4013      	ands	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	3301      	adds	r3, #1
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	fa22 f303 	lsr.w	r3, r2, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f47f ae8e 	bne.w	80021bc <HAL_GPIO_Init+0x14>
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	372c      	adds	r7, #44	; 0x2c
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr
 80024ac:	40010400 	.word	0x40010400

080024b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
 80024bc:	4613      	mov	r3, r2
 80024be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024cc:	e003      	b.n	80024d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	041a      	lsls	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	611a      	str	r2, [r3, #16]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	88fb      	ldrh	r3, [r7, #6]
 80024fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fb90 	bl	8000c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40010400 	.word	0x40010400

08002510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e272      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002530:	4b92      	ldr	r3, [pc, #584]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b04      	cmp	r3, #4
 800253a:	d00c      	beq.n	8002556 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800253c:	4b8f      	ldr	r3, [pc, #572]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d112      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d10b      	bne.n	800256e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d06c      	beq.n	800263c <HAL_RCC_OscConfig+0x12c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d168      	bne.n	800263c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e24c      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x76>
 8002578:	4b80      	ldr	r3, [pc, #512]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a7f      	ldr	r2, [pc, #508]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	e02e      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0x98>
 800258e:	4b7b      	ldr	r3, [pc, #492]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7a      	ldr	r2, [pc, #488]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b78      	ldr	r3, [pc, #480]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a77      	ldr	r2, [pc, #476]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e01d      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0xbc>
 80025b2:	4b72      	ldr	r3, [pc, #456]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a71      	ldr	r2, [pc, #452]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0xd4>
 80025cc:	4b6b      	ldr	r3, [pc, #428]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a6a      	ldr	r2, [pc, #424]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a67      	ldr	r2, [pc, #412]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80025de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d013      	beq.n	8002614 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fde0 	bl	80011b0 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f4:	f7fe fddc 	bl	80011b0 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e200      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002606:	4b5d      	ldr	r3, [pc, #372]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0xe4>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fdcc 	bl	80011b0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261c:	f7fe fdc8 	bl	80011b0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e1ec      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262e:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x10c>
 800263a:	e000      	b.n	800263e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d063      	beq.n	8002712 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800264a:	4b4c      	ldr	r3, [pc, #304]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00b      	beq.n	800266e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002656:	4b49      	ldr	r3, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b08      	cmp	r3, #8
 8002660:	d11c      	bne.n	800269c <HAL_RCC_OscConfig+0x18c>
 8002662:	4b46      	ldr	r3, [pc, #280]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d116      	bne.n	800269c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d005      	beq.n	8002686 <HAL_RCC_OscConfig+0x176>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e1c0      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4939      	ldr	r1, [pc, #228]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800269a:	e03a      	b.n	8002712 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026aa:	f7fe fd81 	bl	80011b0 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe fd7d 	bl	80011b0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1a1      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c4:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4927      	ldr	r1, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
 80026e4:	e015      	b.n	8002712 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b26      	ldr	r3, [pc, #152]	; (8002780 <HAL_RCC_OscConfig+0x270>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fd60 	bl	80011b0 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f4:	f7fe fd5c 	bl	80011b0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e180      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1f0      	bne.n	80026f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d03a      	beq.n	8002794 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d019      	beq.n	800275a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002726:	4b17      	ldr	r3, [pc, #92]	; (8002784 <HAL_RCC_OscConfig+0x274>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe fd40 	bl	80011b0 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe fd3c 	bl	80011b0 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e160      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCC_OscConfig+0x26c>)
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002752:	2001      	movs	r0, #1
 8002754:	f000 faa6 	bl	8002ca4 <RCC_Delay>
 8002758:	e01c      	b.n	8002794 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800275a:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <HAL_RCC_OscConfig+0x274>)
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7fe fd26 	bl	80011b0 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002766:	e00f      	b.n	8002788 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fd22 	bl	80011b0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d908      	bls.n	8002788 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e146      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	42420000 	.word	0x42420000
 8002784:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002788:	4b92      	ldr	r3, [pc, #584]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e9      	bne.n	8002768 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80a6 	beq.w	80028ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a6:	4b8b      	ldr	r3, [pc, #556]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b2:	4b88      	ldr	r3, [pc, #544]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a87      	ldr	r2, [pc, #540]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80027b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]
 80027be:	4b85      	ldr	r3, [pc, #532]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ca:	2301      	movs	r3, #1
 80027cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b82      	ldr	r3, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x4c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d118      	bne.n	800280c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7e      	ldr	r2, [pc, #504]	; (80029d8 <HAL_RCC_OscConfig+0x4c8>)
 80027e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e6:	f7fe fce3 	bl	80011b0 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ee:	f7fe fcdf 	bl	80011b0 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b64      	cmp	r3, #100	; 0x64
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e103      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_OscConfig+0x4c8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x312>
 8002814:	4b6f      	ldr	r3, [pc, #444]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a1b      	ldr	r3, [r3, #32]
 8002818:	4a6e      	ldr	r2, [pc, #440]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6213      	str	r3, [r2, #32]
 8002820:	e02d      	b.n	800287e <HAL_RCC_OscConfig+0x36e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0x334>
 800282a:	4b6a      	ldr	r3, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6213      	str	r3, [r2, #32]
 8002836:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0304 	bic.w	r3, r3, #4
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	e01c      	b.n	800287e <HAL_RCC_OscConfig+0x36e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b05      	cmp	r3, #5
 800284a:	d10c      	bne.n	8002866 <HAL_RCC_OscConfig+0x356>
 800284c:	4b61      	ldr	r3, [pc, #388]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a60      	ldr	r2, [pc, #384]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	4b5e      	ldr	r3, [pc, #376]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a5d      	ldr	r2, [pc, #372]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	e00b      	b.n	800287e <HAL_RCC_OscConfig+0x36e>
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	4a5a      	ldr	r2, [pc, #360]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	6213      	str	r3, [r2, #32]
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a57      	ldr	r2, [pc, #348]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0304 	bic.w	r3, r3, #4
 800287c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d015      	beq.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002886:	f7fe fc93 	bl	80011b0 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fc8f 	bl	80011b0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	f241 3288 	movw	r2, #5000	; 0x1388
 800289c:	4293      	cmp	r3, r2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e0b1      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	4b4b      	ldr	r3, [pc, #300]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0ee      	beq.n	800288e <HAL_RCC_OscConfig+0x37e>
 80028b0:	e014      	b.n	80028dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7fe fc7d 	bl	80011b0 <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b8:	e00a      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ba:	f7fe fc79 	bl	80011b0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e09b      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d0:	4b40      	ldr	r3, [pc, #256]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ee      	bne.n	80028ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028dc:	7dfb      	ldrb	r3, [r7, #23]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8087 	beq.w	8002a06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f8:	4b36      	ldr	r3, [pc, #216]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d061      	beq.n	80029c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d146      	bne.n	800299a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290c:	4b33      	ldr	r3, [pc, #204]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe fc4d 	bl	80011b0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe fc49 	bl	80011b0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e06d      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292c:	4b29      	ldr	r3, [pc, #164]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002940:	d108      	bne.n	8002954 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002942:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	4921      	ldr	r1, [pc, #132]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002954:	4b1f      	ldr	r3, [pc, #124]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a19      	ldr	r1, [r3, #32]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	430b      	orrs	r3, r1
 8002966:	491b      	ldr	r1, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800296e:	2201      	movs	r2, #1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fe fc1d 	bl	80011b0 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fc19 	bl	80011b0 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e03d      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x46a>
 8002998:	e035      	b.n	8002a06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_RCC_OscConfig+0x4cc>)
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fc06 	bl	80011b0 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a8:	f7fe fc02 	bl	80011b0 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e026      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_RCC_OscConfig+0x4c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x498>
 80029c6:	e01e      	b.n	8002a06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e019      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40007000 	.word	0x40007000
 80029dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_OscConfig+0x500>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d106      	bne.n	8002a02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000

08002a14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0d0      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a28:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d910      	bls.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b67      	ldr	r3, [pc, #412]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 0207 	bic.w	r2, r3, #7
 8002a3e:	4965      	ldr	r1, [pc, #404]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	4b63      	ldr	r3, [pc, #396]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d001      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0b8      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d020      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a70:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a88:	4b53      	ldr	r3, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a52      	ldr	r2, [pc, #328]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b50      	ldr	r3, [pc, #320]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	494d      	ldr	r1, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d040      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	4b47      	ldr	r3, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d115      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e07f      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad2:	4b41      	ldr	r3, [pc, #260]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e073      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e06b      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af2:	4b39      	ldr	r3, [pc, #228]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f023 0203 	bic.w	r2, r3, #3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4936      	ldr	r1, [pc, #216]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fb54 	bl	80011b0 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0c:	f7fe fb50 	bl	80011b0 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e053      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 020c 	and.w	r2, r3, #12
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d1eb      	bne.n	8002b0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d210      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b42:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 0207 	bic.w	r2, r3, #7
 8002b4a:	4922      	ldr	r1, [pc, #136]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b52:	4b20      	ldr	r3, [pc, #128]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e032      	b.n	8002bca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4916      	ldr	r1, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d009      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8e:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba2:	f000 f821 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	490a      	ldr	r1, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	5ccb      	ldrb	r3, [r1, r3]
 8002bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bba:	4a09      	ldr	r2, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fab2 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	080036c0 	.word	0x080036c0
 8002be0:	20000004 	.word	0x20000004
 8002be4:	20000008 	.word	0x20000008

08002be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b490      	push	{r4, r7}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bee:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xac>)
 8002bf0:	1d3c      	adds	r4, r7, #4
 8002bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bf8:	f240 2301 	movw	r3, #513	; 0x201
 8002bfc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x40>
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d003      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x46>
 8002c26:	e02b      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c2a:	623b      	str	r3, [r7, #32]
      break;
 8002c2c:	e02b      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	0c9b      	lsrs	r3, r3, #18
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3328      	adds	r3, #40	; 0x28
 8002c38:	443b      	add	r3, r7
 8002c3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	0c5b      	lsrs	r3, r3, #17
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	3328      	adds	r3, #40	; 0x28
 8002c56:	443b      	add	r3, r7
 8002c58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c62:	fb03 f202 	mul.w	r2, r3, r2
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	e004      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	4a0b      	ldr	r2, [pc, #44]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c74:	fb02 f303 	mul.w	r3, r2, r3
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	623b      	str	r3, [r7, #32]
      break;
 8002c7e:	e002      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c82:	623b      	str	r3, [r7, #32]
      break;
 8002c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c86:	6a3b      	ldr	r3, [r7, #32]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc90      	pop	{r4, r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	080036b0 	.word	0x080036b0
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	007a1200 	.word	0x007a1200
 8002ca0:	003d0900 	.word	0x003d0900

08002ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <RCC_Delay+0x34>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <RCC_Delay+0x38>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0a5b      	lsrs	r3, r3, #9
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cc0:	bf00      	nop
  }
  while (Delay --);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1e5a      	subs	r2, r3, #1
 8002cc6:	60fa      	str	r2, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f9      	bne.n	8002cc0 <RCC_Delay+0x1c>
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000004 	.word	0x20000004
 8002cdc:	10624dd3 	.word	0x10624dd3

08002ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d07d      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d16:	61d3      	str	r3, [r2, #28]
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d118      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d34:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a42      	ldr	r2, [pc, #264]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d40:	f7fe fa36 	bl	80011b0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d46:	e008      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d48:	f7fe fa32 	bl	80011b0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e06d      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d02e      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d027      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8e:	4b2e      	ldr	r3, [pc, #184]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d9a:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d014      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fa01 	bl	80011b0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe f9fd 	bl	80011b0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e036      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4917      	ldr	r1, [pc, #92]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de6:	7dfb      	ldrb	r3, [r7, #23]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4a13      	ldr	r2, [pc, #76]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d008      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	490b      	ldr	r1, [pc, #44]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4904      	ldr	r1, [pc, #16]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42420440 	.word	0x42420440

08002e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e041      	b.n	8002ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe f8de 	bl	8001034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 fa70 	bl	8003370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d001      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e03a      	b.n	8002f7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_TIM_Base_Start_IT+0x98>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x58>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x58>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_Base_Start_IT+0x58>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e007      	b.n	8002f78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800

08002f90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0202 	mvn.w	r2, #2
 8002fbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f9b1 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9a4 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f9b3 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d122      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0204 	mvn.w	r2, #4
 8003010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f987 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 800302c:	e005      	b.n	800303a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f97a 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f989 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b08      	cmp	r3, #8
 800304c:	d122      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d11b      	bne.n	8003094 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0208 	mvn.w	r2, #8
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f95d 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f950 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f95f 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d122      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d11b      	bne.n	80030e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0210 	mvn.w	r2, #16
 80030b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2208      	movs	r2, #8
 80030be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f933 	bl	800333a <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f926 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f935 	bl	800334c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10e      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d107      	bne.n	8003114 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0201 	mvn.w	r2, #1
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fd fd12 	bl	8000b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d10e      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d107      	bne.n	8003140 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa77 	bl	800362e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d10e      	bne.n	800316c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d107      	bne.n	800316c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f8f9 	bl	800335e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b20      	cmp	r3, #32
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0220 	mvn.w	r2, #32
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa42 	bl	800361c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003198:	bf00      	nop
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIM_ConfigClockSource+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e0b3      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x180>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f0:	d03e      	beq.n	8003270 <HAL_TIM_ConfigClockSource+0xd0>
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	f200 8087 	bhi.w	8003308 <HAL_TIM_ConfigClockSource+0x168>
 80031fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fe:	f000 8085 	beq.w	800330c <HAL_TIM_ConfigClockSource+0x16c>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	d87f      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003208:	2b70      	cmp	r3, #112	; 0x70
 800320a:	d01a      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0xa2>
 800320c:	2b70      	cmp	r3, #112	; 0x70
 800320e:	d87b      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003210:	2b60      	cmp	r3, #96	; 0x60
 8003212:	d050      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0x116>
 8003214:	2b60      	cmp	r3, #96	; 0x60
 8003216:	d877      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003218:	2b50      	cmp	r3, #80	; 0x50
 800321a:	d03c      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0xf6>
 800321c:	2b50      	cmp	r3, #80	; 0x50
 800321e:	d873      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d058      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x136>
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d86f      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d064      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x156>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d86b      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d060      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x156>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d867      	bhi.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d05c      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x156>
 800323c:	2b10      	cmp	r3, #16
 800323e:	d05a      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003240:	e062      	b.n	8003308 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6899      	ldr	r1, [r3, #8]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f000 f966 	bl	8003522 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003264:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	609a      	str	r2, [r3, #8]
      break;
 800326e:	e04e      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f000 f94f 	bl	8003522 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003292:	609a      	str	r2, [r3, #8]
      break;
 8003294:	e03b      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6859      	ldr	r1, [r3, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	f000 f8c6 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2150      	movs	r1, #80	; 0x50
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f91d 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 80032b4:	e02b      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	461a      	mov	r2, r3
 80032c4:	f000 f8e4 	bl	8003490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2160      	movs	r1, #96	; 0x60
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f90d 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 80032d4:	e01b      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 f8a6 	bl	8003434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2140      	movs	r1, #64	; 0x40
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f8fd 	bl	80034ee <TIM_ITRx_SetConfig>
      break;
 80032f4:	e00b      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f000 f8f4 	bl	80034ee <TIM_ITRx_SetConfig>
        break;
 8003306:	e002      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003308:	bf00      	nop
 800330a:	e000      	b.n	800330e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800330c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr

0800333a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a29      	ldr	r2, [pc, #164]	; (8003428 <TIM_Base_SetConfig+0xb8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_Base_SetConfig+0x30>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800338e:	d007      	beq.n	80033a0 <TIM_Base_SetConfig+0x30>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a26      	ldr	r2, [pc, #152]	; (800342c <TIM_Base_SetConfig+0xbc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0x30>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a25      	ldr	r2, [pc, #148]	; (8003430 <TIM_Base_SetConfig+0xc0>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <TIM_Base_SetConfig+0xb8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <TIM_Base_SetConfig+0x62>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d007      	beq.n	80033d2 <TIM_Base_SetConfig+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a19      	ldr	r2, [pc, #100]	; (800342c <TIM_Base_SetConfig+0xbc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_Base_SetConfig+0x62>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <TIM_Base_SetConfig+0xc0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d108      	bne.n	80033e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <TIM_Base_SetConfig+0xb8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d103      	bne.n	8003418 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	615a      	str	r2, [r3, #20]
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800

08003434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003434:	b480      	push	{r7}
 8003436:	b087      	sub	sp, #28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f023 0201 	bic.w	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800345e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f023 030a 	bic.w	r3, r3, #10
 8003470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	031b      	lsls	r3, r3, #12
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	621a      	str	r2, [r3, #32]
}
 80034e4:	bf00      	nop
 80034e6:	371c      	adds	r7, #28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4313      	orrs	r3, r2
 800350c:	f043 0307 	orr.w	r3, r3, #7
 8003510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr

08003522 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b087      	sub	sp, #28
 8003526:	af00      	add	r7, sp, #0
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800353c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	431a      	orrs	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4313      	orrs	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	609a      	str	r2, [r3, #8]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e046      	b.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d009      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a12      	ldr	r2, [pc, #72]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a10      	ldr	r2, [pc, #64]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800

0800361c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr

0800362e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <__libc_init_array>:
 8003640:	b570      	push	{r4, r5, r6, lr}
 8003642:	2600      	movs	r6, #0
 8003644:	4d0c      	ldr	r5, [pc, #48]	; (8003678 <__libc_init_array+0x38>)
 8003646:	4c0d      	ldr	r4, [pc, #52]	; (800367c <__libc_init_array+0x3c>)
 8003648:	1b64      	subs	r4, r4, r5
 800364a:	10a4      	asrs	r4, r4, #2
 800364c:	42a6      	cmp	r6, r4
 800364e:	d109      	bne.n	8003664 <__libc_init_array+0x24>
 8003650:	f000 f822 	bl	8003698 <_init>
 8003654:	2600      	movs	r6, #0
 8003656:	4d0a      	ldr	r5, [pc, #40]	; (8003680 <__libc_init_array+0x40>)
 8003658:	4c0a      	ldr	r4, [pc, #40]	; (8003684 <__libc_init_array+0x44>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	42a6      	cmp	r6, r4
 8003660:	d105      	bne.n	800366e <__libc_init_array+0x2e>
 8003662:	bd70      	pop	{r4, r5, r6, pc}
 8003664:	f855 3b04 	ldr.w	r3, [r5], #4
 8003668:	4798      	blx	r3
 800366a:	3601      	adds	r6, #1
 800366c:	e7ee      	b.n	800364c <__libc_init_array+0xc>
 800366e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003672:	4798      	blx	r3
 8003674:	3601      	adds	r6, #1
 8003676:	e7f2      	b.n	800365e <__libc_init_array+0x1e>
 8003678:	080036d0 	.word	0x080036d0
 800367c:	080036d0 	.word	0x080036d0
 8003680:	080036d0 	.word	0x080036d0
 8003684:	080036d4 	.word	0x080036d4

08003688 <memset>:
 8003688:	4603      	mov	r3, r0
 800368a:	4402      	add	r2, r0
 800368c:	4293      	cmp	r3, r2
 800368e:	d100      	bne.n	8003692 <memset+0xa>
 8003690:	4770      	bx	lr
 8003692:	f803 1b01 	strb.w	r1, [r3], #1
 8003696:	e7f9      	b.n	800368c <memset+0x4>

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
